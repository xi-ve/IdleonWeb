# WARNING: This is a manual-only build workflow. 
# The main build pipeline is in combined-tests-and-release.yml
# This workflow should only be used for emergency builds or testing.

# Self-hosted runners with fallback to GitHub-hosted runners:
# - kemo: Linux X64 (fallback: ubuntu-latest)  
# - MARIO: Windows X64 (fallback: windows-latest)
# - kemotic-bigmac: macOS ARM64 (fallback: macos-latest)

name: Manual Build Multi-Platform Releases

on:
  workflow_dispatch:  # Allow manual trigger only
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      skip_tests:
        description: 'Skip integration tests (not recommended)'
        required: false
        type: boolean
        default: false

jobs:
  select-runners:
    runs-on: ubuntu-latest
    outputs:
      linux: ${{ steps.pick.outputs.linux }}
      windows: ${{ steps.pick.outputs.windows }}
      macos: ${{ steps.pick.outputs.macos }}
    steps:
    - name: Pick runners (self-hosted when online, else GitHub-hosted)
      id: pick
      uses: actions/github-script@v7
      with:
        script: |
          const {owner, repo} = context.repo;
          const res = await github.request('GET /repos/{owner}/{repo}/actions/runners', { owner, repo, per_page: 100 });
          function available(label) {
            return res.data.runners.some(r => r.status === 'online' && !r.busy && r.labels.some(l => l.name === label));
          }
          const linux = available('kemo') ? '["self-hosted","kemo"]' : '"ubuntu-latest"';
          const windows = available('MARIO') ? '["self-hosted","MARIO"]' : '"windows-latest"';
          const macos = available('kemotic-bigmac') ? '["self-hosted","kemotic-bigmac"]' : '"macos-latest"';
          core.setOutput('linux', linux);
          core.setOutput('windows', windows);
          core.setOutput('macos', macos);

  build:
    name: Build for ${{ matrix.platform }}
    needs: select-runners
    runs-on: ${{ fromJSON(matrix.runner) }}
    strategy:
      matrix:
        include:
          - platform: linux
            runner: ${{ needs.select-runners.outputs.linux }}
            artifact-name: IdleonWeb-linux
            executable-name: IdleonWeb
          - platform: windows
            runner: ${{ needs.select-runners.outputs.windows }}
            artifact-name: IdleonWeb-windows
            executable-name: IdleonWeb.exe
          - platform: macos
            runner: ${{ needs.select-runners.outputs.macos }}
            artifact-name: IdleonWeb-macos-universal2
            executable-name: IdleonWeb

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Create virtual environment
      run: |
        python -m venv .venv
        
    - name: Activate virtual environment and install dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r build_process/build-requirements.txt

    - name: Activate virtual environment and install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r build_process/build-requirements.txt

    - name: Build standalone executable (Linux)
      if: runner.os == 'Linux'
      run: |
        source .venv/bin/activate
        python build_process/build_standalone.py --platform linux --output release_build

    - name: Build universal2 executable (macOS)
      if: runner.os == 'macOS'
      run: |
        source .venv/bin/activate
        python build_process/build_standalone.py --platform macos --macos-arch universal2 --output release_build

    - name: Verify fat binary (macOS)
      if: runner.os == 'macOS'
      run: lipo -info release_build/dist/macos/IdleonWeb

    - name: Build standalone executable (Windows)
      if: runner.os == 'Windows'
      run: |
        .venv\Scripts\activate
        python build_process/build_standalone.py --platform ${{ matrix.platform }} --output release_build

    - name: Verify build output
      run: |
        ls -la release_build/dist/${{ matrix.platform }}/
      shell: bash

    - name: Create archive (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cd release_build/dist/${{ matrix.platform }}
        tar -czf ../../../${{ matrix.artifact-name }}.tar.gz ${{ matrix.executable-name }}

    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      run: |
        cd release_build/dist/${{ matrix.platform }}
        7z a ../../../${{ matrix.artifact-name }}.zip ${{ matrix.executable-name }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          ${{ matrix.artifact-name }}.tar.gz
          ${{ matrix.artifact-name }}.zip
        if-no-files-found: ignore

  release:
    name: Create Release
    needs: [select-runners, build]
    runs-on: ${{ fromJSON(needs.select-runners.outputs.linux) }}
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Display artifact structure
      run: ls -la artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Release ${{ github.event.inputs.version || github.ref_name }}
        draft: false
        prerelease: false
        files: |
          artifacts/**/*.tar.gz
          artifacts/**/*.zip
        body: |
          ## IdleonWeb Release ${{ github.event.inputs.version || github.ref_name }}
          
          ### Downloads
          - **Linux**: IdleonWeb-linux.tar.gz
          - **Windows**: IdleonWeb-windows.zip  
          - **macOS**: IdleonWeb-macos.tar.gz
          
          ### Installation
          1. Download the appropriate file for your operating system
          2. Extract the archive
          3. Run the executable directly (no installation required)
          
          ### Changes
          See the commit history for detailed changes in this release.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
