name: Integration Tests and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Check if we should run tests
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check commit author and message
        id: check
        run: |
          # Get the commit message from git log
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "Commit message: $COMMIT_MESSAGE"
          echo "Actor: ${{ github.actor }}"
          echo "Event name: ${{ github.event_name }}"
          
          # Check if this is a version bump commit (regardless of author)
          if [[ "$COMMIT_MESSAGE" == *"Bump version"* ]]; then
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "Skipping tests and release for version bump commit"
          else
            echo "should-run=true" >> $GITHUB_OUTPUT
            # Only release on push to main branch (not on PRs)
            if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "Will run tests and create release after success"
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
              echo "Will run tests only (no release for PRs or non-main branches)"
            fi
          fi

  test-arch:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Clean Docker cache
        run: |
          docker system prune -f
          docker builder prune -f
      
      - name: Run Arch Linux tests
        run: |
          cd integration_tests
          docker compose --profile arch-test up --build --force-recreate --exit-code-from test-arch

  test-ubuntu:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Clean Docker cache
        run: |
          docker system prune -f
          docker builder prune -f
      
      - name: Run Ubuntu tests
        run: |
          cd integration_tests
          docker compose --profile ubuntu-test up --build --force-recreate --exit-code-from test-ubuntu

  test-windows:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          cd core && npm install && cd ..
      
      - name: Create test directories
        shell: cmd
        run: |
          if not exist core mkdir core
          if not exist plugins mkdir plugins
          if not exist webui mkdir webui
          echo "Test directories ready"
      
      - name: Run Windows tests
        shell: cmd
        run: |
          python integration_tests/run_tests.py windows

  test-summary:
    needs: [check-commit, test-arch, test-ubuntu, test-windows]
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Show test summary
        run: |
          echo "=================================================="
          echo "Integration Tests Summary"
          echo "=================================================="
          echo "All platform tests completed successfully!"
          echo ""
          echo "Test Results:"
          echo "- Arch Linux: ✅ PASS"
          echo "- Ubuntu: ✅ PASS" 
          echo "- Windows: ✅ PASS"
          echo ""
          echo "All integration tests passed across all platforms!"

  release:
    needs: [check-commit, test-arch, test-ubuntu, test-windows]
    if: |
      always() && 
      needs.check-commit.outputs.should-release == 'true' &&
      needs.test-arch.result == 'success' &&
      needs.test-ubuntu.result == 'success' &&
      needs.test-windows.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Get and bump version
        id: version
        run: |
          VERSION_FILE=VERSION
          if [ ! -f "$VERSION_FILE" ]; then echo "0.1.0" > $VERSION_FILE; fi
          OLD_VERSION=$(cat $VERSION_FILE)
          echo "Current version: $OLD_VERSION"
          
          # Always bump version when releasing after successful tests
          echo "Bumping version after successful integration tests..."
          IFS='.' read -r major minor patch <<< "$OLD_VERSION"
          patch=$((patch + 1))
          NEW_VERSION="$major.$minor.$patch"
          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > $VERSION_FILE
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push bumped version
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git
          git add VERSION
          git commit -m "Bump version to ${{ steps.version.outputs.version }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Create release zip (exclude .github and integration_tests)
        run: |
          zip -r IdleonWeb-${{ steps.version.outputs.version }}.zip . -x '*.git*' '.github/*' 'integration_tests/*'

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            Automated release for version ${{ steps.version.outputs.version }}
            
            Changes in this release:
            - Automated version bump
            - Integration tests passed on all platforms (Arch Linux, Ubuntu, Windows)
          files: IdleonWeb-${{ steps.version.outputs.version }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}