name: Integration Tests and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: read
  actions: read

jobs:
  # Check if we should run tests
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check commit author and message
        id: check
        run: |
          # Get the commit message from git log
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "Commit message: $COMMIT_MESSAGE"
          echo "Actor: ${{ github.actor }}"
          echo "Event name: ${{ github.event_name }}"
          
          # Check if this is a version bump commit (regardless of author)
          if [[ "$COMMIT_MESSAGE" == *"Bump version"* ]]; then
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "Skipping tests and release for version bump commit"
          else
            echo "should-run=true" >> $GITHUB_OUTPUT
            # Only release on push to main branch (not on PRs)
            if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "Will run tests and create release after success"
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
              echo "Will run tests only (no release for PRs or non-main branches)"
            fi
          fi

  test-arch:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Clean Docker cache
        run: |
          docker system prune -f
          docker builder prune -f
      
      - name: Run Arch Linux tests
        run: |
          cd integration_tests
          docker compose --profile arch-test up --build --force-recreate --exit-code-from test-arch

  test-ubuntu:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Clean Docker cache
        run: |
          docker system prune -f
          docker builder prune -f
      
      - name: Run Ubuntu tests
        run: |
          cd integration_tests
          docker compose --profile ubuntu-test up --build --force-recreate --exit-code-from test-ubuntu

  test-windows:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          cd core && npm install && cd ..
      
      - name: Create test directories
        shell: cmd
        run: |
          if not exist core mkdir core
          if not exist plugins mkdir plugins
          if not exist webui mkdir webui
          echo "Test directories ready"
      
      - name: Run Windows tests
        shell: cmd
        run: |
          python integration_tests/run_tests.py windows

  test-summary:
    needs: [check-commit, test-arch, test-ubuntu, test-windows]
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Show test summary
        run: |
          echo "=================================================="
          echo "Integration Tests Summary"
          echo "=================================================="
          echo "All platform tests completed successfully!"
          echo ""
          echo "Test Results:"
          echo "- Arch Linux: ✅ PASS"
          echo "- Ubuntu: ✅ PASS" 
          echo "- Windows: ✅ PASS"
          echo ""
          echo "All integration tests passed across all platforms!"

  # Build binaries on native platforms
  build-linux:
    needs: [check-commit, test-arch, test-ubuntu, test-windows]
    if: |
      always() && 
      needs.check-commit.outputs.should-release == 'true' &&
      needs.test-arch.result == 'success' &&
      needs.test-ubuntu.result == 'success' &&
      needs.test-windows.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get and bump version
        id: version
        run: |
          VERSION_FILE=VERSION
          if [ ! -f "$VERSION_FILE" ]; then echo "0.1.0" > $VERSION_FILE; fi
          OLD_VERSION=$(cat $VERSION_FILE)
          echo "Current version: $OLD_VERSION"
          
          # Always bump version when releasing after successful tests
          echo "Bumping version after successful integration tests..."
          IFS='.' read -r major minor patch <<< "$OLD_VERSION"
          patch=$((patch + 1))
          NEW_VERSION="$major.$minor.$patch"
          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > $VERSION_FILE
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push bumped version
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add VERSION
          git commit -m "Bump version to ${{ steps.version.outputs.version }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Python dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r build_process/build-requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd core
          npm install
          cd ..

      - name: Build Linux executable
        run: |
          source .venv/bin/activate
          python build_process/build_standalone.py --platform linux --output release_linux --clean
        timeout-minutes: 15

      - name: Create Linux archive
        run: |
          cd release_linux/dist/linux
          tar -czf ../../../IdleonWeb-linux-v${{ steps.version.outputs.version }}.tar.gz IdleonWeb
          cd ../../..
          echo "✅ Linux archive created"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: IdleonWeb-linux-v${{ steps.version.outputs.version }}
          path: IdleonWeb-linux-v${{ steps.version.outputs.version }}.tar.gz

  build-windows:
    needs: [check-commit, test-arch, test-ubuntu, test-windows, build-linux]
    if: |
      always() && 
      needs.check-commit.outputs.should-release == 'true' &&
      needs.test-arch.result == 'success' &&
      needs.test-ubuntu.result == 'success' &&
      needs.test-windows.result == 'success' &&
      needs.build-linux.result == 'success'
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Python dependencies
        run: |
          python -m venv .venv
          .venv\Scripts\Activate.ps1
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r build_process\build-requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd core
          npm install
          cd ..

      - name: Build Windows executable
        run: |
          .venv\Scripts\Activate.ps1
          python build_process\build_standalone.py --platform windows --output release_windows --clean
        timeout-minutes: 15

      - name: Create Windows archive
        run: |
          cd release_windows\dist\windows
          powershell Compress-Archive -Path IdleonWeb.exe -DestinationPath ..\..\..\IdleonWeb-windows-v${{ needs.build-linux.outputs.version }}.zip
          cd ..\..\..
          echo "✅ Windows archive created"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: IdleonWeb-windows-v${{ needs.build-linux.outputs.version }}
          path: IdleonWeb-windows-v${{ needs.build-linux.outputs.version }}.zip

  build-macos:
    needs: [check-commit, test-arch, test-ubuntu, test-windows, build-linux]
    if: |
      always() && 
      needs.check-commit.outputs.should-release == 'true' &&
      needs.test-arch.result == 'success' &&
      needs.test-ubuntu.result == 'success' &&
      needs.test-windows.result == 'success' &&
      needs.build-linux.result == 'success'
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Python dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r build_process/build-requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd core
          npm install
          cd ..

      - name: Build macOS executable
        run: |
          source .venv/bin/activate
          python build_process/build_standalone.py --platform macos --output release_macos --clean
        timeout-minutes: 15

      - name: Create macOS archive
        run: |
          cd release_macos/dist/macos
          tar -czf ../../../IdleonWeb-macos-v${{ needs.build-linux.outputs.version }}.tar.gz IdleonWeb
          cd ../../..
          echo "✅ macOS archive created"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: IdleonWeb-macos-v${{ needs.build-linux.outputs.version }}
          path: IdleonWeb-macos-v${{ needs.build-linux.outputs.version }}.tar.gz

  release:
    needs: [build-linux, build-windows, build-macos]
    if: always() && needs.build-linux.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: Prepare release files
        id: prepare
        run: |
          # Debug: Show artifact structure
          echo "Artifact directory structure:"
          ls -la artifacts/
          
          # Move artifacts from subdirectories to root
          for artifact_dir in artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              echo "Processing: $artifact_dir"
              ls -la "$artifact_dir"
              # Use cp instead of mv and handle each file type explicitly
              cp "$artifact_dir"/*.tar.gz . 2>/dev/null || true
              cp "$artifact_dir"/*.zip . 2>/dev/null || true
            fi
          done
          
          # Debug: Show what we have now
          echo "Files in root after extraction:"
          ls -la *.tar.gz *.zip 2>/dev/null || echo "No archives found"
          
          # Create source code archive
          zip -r IdleonWeb-source-v${{ needs.build-linux.outputs.version }}.zip . \
            -x '*.git*' '.github/*' 'integration_tests/*' 'release_*/*' '.venv/*' 'artifacts/*'
          
          # Generate build status for release notes
          BUILD_STATUS=""
          
          # Check Linux build
          LINUX_FILE="IdleonWeb-linux-v${{ needs.build-linux.outputs.version }}.tar.gz"
          if [[ "${{ needs.build-linux.result }}" == "success" ]] && [ -f "$LINUX_FILE" ]; then
            BUILD_STATUS+="- 🐧 **Linux**: ✅ \`$LINUX_FILE\`"$'\n'
          else
            BUILD_STATUS+="- 🐧 **Linux**: ❌ Build failed"$'\n'
          fi
          
          # Check Windows build
          WINDOWS_FILE="IdleonWeb-windows-v${{ needs.build-linux.outputs.version }}.zip"
          if [[ "${{ needs.build-windows.result }}" == "success" ]] && [ -f "$WINDOWS_FILE" ]; then
            BUILD_STATUS+="- 🪟 **Windows**: ✅ \`$WINDOWS_FILE\`"$'\n'
          else
            BUILD_STATUS+="- 🪟 **Windows**: ❌ Build failed"$'\n'
          fi
          
          # Check macOS build
          MACOS_FILE="IdleonWeb-macos-v${{ needs.build-linux.outputs.version }}.tar.gz"
          if [[ "${{ needs.build-macos.result }}" == "success" ]] && [ -f "$MACOS_FILE" ]; then
            BUILD_STATUS+="- 🍎 **macOS**: ✅ \`$MACOS_FILE\`"$'\n'
          else
            BUILD_STATUS+="- 🍎 **macOS**: ❌ Build failed"$'\n'
          fi
          
          BUILD_STATUS+=""$'\n'
          BUILD_STATUS+="📦 **Source Code**: \`IdleonWeb-source-v${{ needs.build-linux.outputs.version }}.zip\`"
          
          # Output for use in next step
          {
            echo "build-status<<EOF"
            echo "$BUILD_STATUS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.build-linux.outputs.version }}
          name: IdleonWeb v${{ needs.build-linux.outputs.version }}
          body: |
            Auto-generated release with standalone executables for multiple platforms.
            
            ### Build Results
            ${{ steps.prepare.outputs.build-status }}
            
            **Requirements**: Node.js must be installed on target system.
            **Installation**: Extract archive and run executable. Dependencies install automatically.
            
            For source builds or development setup, see [README.md](https://github.com/${{ github.repository }}/blob/main/README.md).
          files: |
            IdleonWeb-*.tar.gz
            IdleonWeb-*.zip
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}