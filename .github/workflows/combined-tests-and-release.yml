name: Integration Tests and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: read
  actions: read

jobs:
  # Check if we should run tests
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check commit author and message
        id: check
        run: |
          # Get the commit message from git log
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "Commit message: $COMMIT_MESSAGE"
          echo "Actor: ${{ github.actor }}"
          echo "Event name: ${{ github.event_name }}"
          
          # Check if this is a version bump commit (regardless of author)
          if [[ "$COMMIT_MESSAGE" == *"Bump version"* ]]; then
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "Skipping tests and release for version bump commit"
          else
            echo "should-run=true" >> $GITHUB_OUTPUT
            # Only release on push to main branch (not on PRs)
            if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              echo "should-release=true" >> $GITHUB_OUTPUT
              echo "Will run tests and create release after success"
            else
              echo "should-release=false" >> $GITHUB_OUTPUT
              echo "Will run tests only (no release for PRs or non-main branches)"
            fi
          fi

  test-arch:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Clean Docker cache
        run: |
          docker system prune -f
          docker builder prune -f
      
      - name: Run Arch Linux tests
        run: |
          cd integration_tests
          docker compose --profile arch-test up --build --force-recreate --exit-code-from test-arch

  test-ubuntu:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Clean Docker cache
        run: |
          docker system prune -f
          docker builder prune -f
      
      - name: Run Ubuntu tests
        run: |
          cd integration_tests
          docker compose --profile ubuntu-test up --build --force-recreate --exit-code-from test-ubuntu

  test-windows:
    needs: check-commit
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          cd core && npm install && cd ..
      
      - name: Create test directories
        shell: cmd
        run: |
          if not exist core mkdir core
          if not exist plugins mkdir plugins
          if not exist webui mkdir webui
          echo "Test directories ready"
      
      - name: Run Windows tests
        shell: cmd
        run: |
          python integration_tests/run_tests.py windows

  test-summary:
    needs: [check-commit, test-arch, test-ubuntu, test-windows]
    if: needs.check-commit.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Show test summary
        run: |
          echo "=================================================="
          echo "Integration Tests Summary"
          echo "=================================================="
          echo "All platform tests completed successfully!"
          echo ""
          echo "Test Results:"
          echo "- Arch Linux: ✅ PASS"
          echo "- Ubuntu: ✅ PASS" 
          echo "- Windows: ✅ PASS"
          echo ""
          echo "All integration tests passed across all platforms!"

  release:
    needs: [check-commit, test-arch, test-ubuntu, test-windows]
    if: |
      always() && 
      needs.check-commit.outputs.should-release == 'true' &&
      needs.test-arch.result == 'success' &&
      needs.test-ubuntu.result == 'success' &&
      needs.test-windows.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Get and bump version
        id: version
        run: |
          VERSION_FILE=VERSION
          if [ ! -f "$VERSION_FILE" ]; then echo "0.1.0" > $VERSION_FILE; fi
          OLD_VERSION=$(cat $VERSION_FILE)
          echo "Current version: $OLD_VERSION"
          
          # Always bump version when releasing after successful tests
          echo "Bumping version after successful integration tests..."
          IFS='.' read -r major minor patch <<< "$OLD_VERSION"
          patch=$((patch + 1))
          NEW_VERSION="$major.$minor.$patch"
          echo "New version: $NEW_VERSION"
          echo "$NEW_VERSION" > $VERSION_FILE
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push bumped version
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git add VERSION
          git commit -m "Bump version to ${{ steps.version.outputs.version }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js for builds
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create virtual environment for builds
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r build_process/build-requirements.txt

      - name: Install Node.js dependencies
        run: |
          cd core
          npm install
          cd ..

      - name: Build Linux executable
        run: |
          source .venv/bin/activate
          python build_process/build_standalone.py --platform linux --output release_linux --clean
        timeout-minutes: 15

      - name: Build Windows executable (cross-compile attempt)
        run: |
          source .venv/bin/activate
          python build_process/build_standalone.py --platform windows --output release_windows --clean
        continue-on-error: true
        timeout-minutes: 15

      - name: Build macOS executable (cross-compile attempt)
        run: |
          source .venv/bin/activate
          python build_process/build_standalone.py --platform macos --output release_macos --clean
        continue-on-error: true
        timeout-minutes: 15

      - name: Create archives
        run: |
          # Verify Linux build succeeded (required)
          if [ ! -d "release_linux/dist/linux" ]; then
            echo "ERROR: Linux build failed - no executable found"
            exit 1
          fi
          
          # Create Linux archive (required)
          cd release_linux/dist/linux
          tar -czf ../../../IdleonWeb-linux-v${{ steps.version.outputs.version }}.tar.gz *
          cd ../../..
          echo "✅ Linux archive created"
          
          # Create Windows archive if build succeeded
          if [ -d "release_windows/dist/windows" ]; then
            cd release_windows/dist/windows
            zip -r ../../../IdleonWeb-windows-v${{ steps.version.outputs.version }}.zip *
            cd ../../..
            echo "✅ Windows archive created"
          else
            echo "⚠️ Windows build not available"
          fi
          
          # Create macOS archive if build succeeded
          if [ -d "release_macos/dist/macos" ]; then
            cd release_macos/dist/macos
            tar -czf ../../../IdleonWeb-macos-v${{ steps.version.outputs.version }}.tar.gz *
            cd ../../..
            echo "✅ macOS archive created"
          else
            echo "⚠️ macOS build not available"
          fi
          
          # Create source code archive
          zip -r IdleonWeb-source-v${{ steps.version.outputs.version }}.zip . -x '*.git*' '.github/*' 'integration_tests/*' 'release_*/*' '.venv/*'
          echo "✅ Source archive created"

      - name: List created files
        run: |
          echo "Created release files:"
          ls -la *.tar.gz *.zip

      - name: Create GitHub Release with Binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## IdleonWeb Release v${{ steps.version.outputs.version }}
            
            ### Integration Tests Status ✅
            All platform integration tests passed successfully:
            - ✅ Arch Linux: PASS
            - ✅ Ubuntu: PASS  
            - ✅ Windows: PASS
            
            ### Downloads
            **Standalone Executables (No Installation Required):**
            - 🐧 **Linux**: `IdleonWeb-linux-v${{ steps.version.outputs.version }}.tar.gz`
            - 🪟 **Windows**: `IdleonWeb-windows-v${{ steps.version.outputs.version }}.zip` *(if available)*
            - 🍎 **macOS**: `IdleonWeb-macos-v${{ steps.version.outputs.version }}.tar.gz` *(if available)*
            
            **Source Code:**
            - 📦 **Source**: `IdleonWeb-source-v${{ steps.version.outputs.version }}.zip`
            
            ### Installation Instructions
            1. Download the appropriate executable file for your operating system
            2. Extract the archive
            3. Run the executable directly (no installation required)
            4. The application will create a `conf.json` file in the same directory
            
            ### Features
            - 🚀 Standalone executables with embedded Python runtime
            - 🔧 Auto-injection capabilities
            - 🎮 Full plugin system support
            - 📝 Persistent configuration management
            
            ### Technical Details
            - Python Runtime: Embedded (no system Python required)
            - Config Format: JSON with automatic migration
            - Build System: PyInstaller with cross-platform support
            - Size: ~27MB per platform
          files: |
            IdleonWeb-*.tar.gz
            IdleonWeb-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}